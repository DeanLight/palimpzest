from typing import List, Tuple
from palimpzest.sets import Set
from palimpzest.operators import LogicalOperator
from palimpzest.operators.physical import PhysicalOp


class Plan:
    """A generic Plan is a graph of nodes (#TODO a list for now).
    The main subclasses are a LogicalPlan, which is composed of logical Operators, and a PhysicalPlan, which is composed of physical Operators.
    Plans are typically generated by objects of class Planner, and consumed by several objects, e.g., Execution, CostEstimator, Optimizer, etc. etc.
    """

    operators = []

    def __init__(self):
        raise NotImplementedError

    def __iter__(self):
        return iter(self.operators)

    def __next__(self):
        return next(iter(self.operators))
    
    def __len__(self):
        return len(self.operators)

    def __repr__(self):
        return f"{self.__class__.__name__}:\n" + "\n".join(
            map(str, [f"{idx}. {str(op)}" for idx, op in enumerate(self.operators)])
        )


class LogicalPlan(Plan):

    def __init__(self, datasets: List[Set] = [], operators: List[LogicalOperator] = []):
        self.dataset = datasets
        self.operators = operators


legacy_PhysicalPlan = Tuple[float, float, float, PhysicalOp]


class PhysicalPlan(Plan):

    def __init__(self, dataset, num_samples):
        self.dataset = dataset
        self.operators = []
        self.num_samples = num_samples

        self.stats = PlanStats()

    # NOTE: would we need something like the following?:
    def getStats():
        # compute and return agg. stats
        return

    def __iter__(self):
        base_operator = self.operators[-1]
        for record, stats in base_operator:
            self.stats.append(stats)
            yield record
        
