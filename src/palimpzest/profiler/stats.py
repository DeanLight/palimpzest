from dataclasses import dataclass, asdict
from typing import Dict, List


@dataclass
class Stats:
    """Base dataclass for storing statistics captured during the execution of a physical plan."""

    def to_dict(self):
        return asdict(self)


class ApiStats(Stats):
    """Staistics captured from a (non-LLM) API call."""
    # total time spent waiting for the API to return a response
    api_call_duration_secs: float=None


class GenerationStats(Stats):
    """Statistics captured from LLM calls (i.e. the Generator's .generate() functions)."""
    # total time spent from sending input to LLM to receiving output string
    llm_call_duration_secs: float
    # the prompt used to generate the output
    prompt: str
    # the usage dictionary for the LLM call
    usage: Dict[str, int]
    # the reason the LLM stopped generating tokens
    stop_reason: str


class BondedQueryStats(Stats):
    """Statistics captured from bonded queries."""
    # the generation statistics from the call to a generator
    gen_stats: GenerationStats
    # the set of input fields passed into the generation
    input_fields: List[str]
    # the set of fields the bonded query was supposed to generate values for
    generated_fields: List[str]


class FieldQueryStats(Stats):
    """Statistics captured from generating the value for a single field in a conventional query."""
    # the generation statistics from the call to a generator
    gen_stats: GenerationStats
    # the field the statistics were generated for
    field_name: str


class ConventionalQueryStats(Stats):
    """Statistics captured from conventional queries."""
    # the list of FieldQueryStats for each field in the generated_fields
    field_query_stats_lst: List[FieldQueryStats]
    # the set of input fields passed into the generation
    input_fields: List[str]
    # the set of fields the conventional query was supposed to generate values for
    generated_fields: List[str]


class CodeGenStepStats(Stats):
    """
    Statistics captured from running the initial code generation step.
    In this step, the CODEGEN_PROMPT has formatting applied and then an initial
    piece of code is generated with a call to `llmCodeGen`, which returns the `code`
    and a GenerationStats object.
    """
    # CODEGEN_PROMPT after formatting is applied
    codegen_prompt: str
    # initial code generated by call to `llmCodeGen` with formatted CODEGEN_PROMPT
    code: str
    # the generation statistics from the call to `llmCodeGen`
    gen_stats: GenerationStats
    

class AdviceGenStepStats(Stats):
    """
    Statistics captured from running the advice generation step.
    In this step, the ADVICEGEN_PROMPT has formatting applied and then a set of
    pieces of advice are generated with a call to `llmAdviceGen`, which returns the
    `advices` and a GenerationStats object.
    """
    # ADVICEGEN_PROMPT after formatting is applied
    advicegen_prompt: str
    # list of advice strings generated by call to `llmAdviceGen` with formatted ADVICEGEN_PROMPT
    advices: List[str]
    # the generation statistics from the call to `llmAdviceGen`
    gen_stats: GenerationStats


class AdvisedCodeGenStepStats(Stats):
    """
    Statistics captured from running the and advised code generation step.
    In this step, the ADVICED_CODEGEN_PROMPT has formatting applied and then a
    piece of code is generated with a call to `llmCodeGen` for some given piece
    of `advice`. The call to `llmCodeGen` returns the `code` and a GenerationStats object.
    """
    # ADVICED_CODEGEN_PROMPT after formatting is applied
    adviced_codegen_prompt: str
    # the piece of advice used to in this advised code generation
    advice: str
    # the code generated with this piece of advice
    code: str
    # the generation statistics from the call to `llmCodeGen`
    gen_stats: GenerationStats


class FullCodeGenStats(Stats):
    """
    The entire set of statistics that can be captured from a call to the `codeGen` function.

    This includes:
    - stats for the initial code generation step
    - stats for the advice generation step
    - a list of stats for each code generation step with a given piece of advice
    """
    # stats from the initial code generation step
    init_code_gen_stats: CodeGenStepStats
    # stats from the advice generation step (this is an optional step)
    advice_gen_stats: AdviceGenStepStats = None
    # list of stats from the advised code generation step (one set of stats per-piece of advice)
    advised_code_gen_stats: List[AdvisedCodeGenStepStats] = None


class InduceLLMStats(Stats):
    """Dataclass containing all possible statistics which could be returned from an induce w/LLM operation."""
    # stats from bonded query
    bonded_query_stats: BondedQueryStats = None
    # stats from conventional query
    conventional_query_stats: ConventionalQueryStats = None
    # stats from code generation
    full_code_gen_stats: FullCodeGenStats = None


class InduceNonLLMStats(Stats):
    """Dataclass containing all possible statistics which could be returned from a hard-coded induce operation."""
    # stats containing time spent calling some external API
    api_stats: ApiStats


class FilterStats(Stats):
    """Dataclass containing all possible statistics which could be returned from a filter operation."""
    # the generation statistics from the call to the filter LLM
    gen_stats: GenerationStats


class StatsProcessor:
    """
    This class implements a set of standardized functions for processing profiling statistics
    collected by PZ.
    """
    def __init__(self, stats: Stats) -> None:
        self.stats = stats
